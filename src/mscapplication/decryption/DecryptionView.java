/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mscapplication.decryption;

/**
 *
 * @author Andrew
 */
public class DecryptionView extends javax.swing.JPanel {

    /**
     * Creates new form DecryptionView
     */
    public DecryptionView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane12 = new javax.swing.JScrollPane();
        decryptCipherTextAsHexTextArea = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        decPlainTextAsHexTextArea = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        decryptCipherTextAsHexTextArea.setColumns(20);
        decryptCipherTextAsHexTextArea.setLineWrap(true);
        decryptCipherTextAsHexTextArea.setRows(5);
        jScrollPane12.setViewportView(decryptCipherTextAsHexTextArea);

        decPlainTextAsHexTextArea.setColumns(20);
        decPlainTextAsHexTextArea.setLineWrap(true);
        decPlainTextAsHexTextArea.setRows(5);
        decPlainTextAsHexTextArea.setWrapStyleWord(true);
        jScrollPane13.setViewportView(decPlainTextAsHexTextArea);

        jLabel16.setText("Cipher Text As Hex");

        jLabel18.setText("Plain Text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                    .addComponent(jScrollPane13))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea decPlainTextAsHexTextArea;
    private javax.swing.JTextArea decryptCipherTextAsHexTextArea;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    // End of variables declaration//GEN-END:variables

public String getDecryptCipherTextAsHexTextArea () {
    
    return decryptCipherTextAsHexTextArea.getText();
    
}

public void setDecryptCipherTextAsHexTextArea (String textValue) {
    
    decryptCipherTextAsHexTextArea.setText(textValue);
    
}

public void setDecPlainTextAsHexTextArea (String textValue) {
    
    decPlainTextAsHexTextArea.setText(textValue);
}  

public String getDecPlainTextAsHexTextArea () {
    
    return decPlainTextAsHexTextArea.getText();
}  


}
